2023-11-15 00:00:42.960 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:00:43.811 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:00:45.467 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:00:45.471 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:00:45.541 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55ms. Found 0 Redis repository interfaces.
2023-11-15 00:00:45.791 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:00:46.212 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:00:47.706 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:00:47.729 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:00:47.729 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:00:47.729 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:00:47.823 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:00:47.823 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 4004 ms
2023-11-15 00:00:48.090 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:00:48.125 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:00:48.757 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:00:51.216 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:00:52.085 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:00:56.395 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:00:56.584 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:00:56.982 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:00:57.375 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:00:57.411 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37142 (http) with context path ''
2023-11-15 00:00:57.411 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37142
2023-11-15 00:00:57.423 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:00:57.509 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:00:57.588 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:00:57.588 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:00:57.763 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:00:57.763 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:00:57.995 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:00:58.183 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:00:58.183 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:00:58.183 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:00:58.183 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:00:58.183 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:00:58.183 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:00:58.183 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:00:58.425 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:00:58.425 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:00:58.425 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:00:58.425 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699977658425 with initial instances count: 0
2023-11-15 00:00:58.425 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:00:58.440 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699977658440, current=UP, previous=STARTING]
2023-11-15 00:00:58.440 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:00:58.560 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:00:58.685 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 16.348 seconds (JVM running for 18.456)
2023-11-15 00:00:58.735 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:00:58.735 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:01:01.290 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:01:01.338 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:00:43 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@79ac50fe]; rollback [true]
2023-11-15 00:01:01.816 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:01:01.884 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:01:01.964 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.044 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.075 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.154 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.200 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.236 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.268 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.315 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.346 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.425 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.535 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.566 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.615 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.691 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.723 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.754 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.801 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:01:02.879 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:00:43 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:01:02.898 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:01:02.898 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699977662898, current=DOWN, previous=UP]
2023-11-15 00:01:02.898 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:01:02.945 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:01:03.077 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:01:03.093 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:01:03.658 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:01:03.658 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:01:06.675 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:01:06.722 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:01:06.722 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2023-11-15 00:05:23.216 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:05:24.036 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:05:25.405 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:05:25.421 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:05:25.515 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45ms. Found 0 Redis repository interfaces.
2023-11-15 00:05:25.649 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:05:25.916 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:05:27.388 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:05:27.407 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:05:27.407 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:05:27.407 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:05:27.496 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:05:27.496 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3460 ms
2023-11-15 00:05:27.750 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:05:27.777 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:05:28.441 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:05:30.796 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:05:31.660 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:05:35.668 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:05:35.817 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:05:36.172 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:05:36.547 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:05:36.590 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37202 (http) with context path ''
2023-11-15 00:05:36.590 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37202
2023-11-15 00:05:36.590 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:05:36.687 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:05:36.769 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:05:36.769 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:05:36.935 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:05:36.935 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:05:37.146 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:05:37.311 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:05:37.311 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:05:37.311 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:05:37.311 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:05:37.311 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:05:37.311 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:05:37.311 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:05:37.511 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:05:37.517 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:05:37.517 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:05:37.517 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699977937517 with initial instances count: 0
2023-11-15 00:05:37.517 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:05:37.532 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699977937532, current=UP, previous=STARTING]
2023-11-15 00:05:37.532 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:05:37.663 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:05:37.836 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 15.23 seconds (JVM running for 16.773)
2023-11-15 00:05:37.883 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:05:37.883 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:05:40.367 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:05:40.398 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:05:24 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@79ac50fe]; rollback [true]
2023-11-15 00:05:40.808 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:05:40.878 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:05:40.961 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:05:51.941 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.315 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.383 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.421 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.457 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.492 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.529 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.572 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.646 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.680 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.721 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.756 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.837 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.871 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.907 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:01.941 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:06:02.014 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:05:24 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:06:02.019 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:06:02.019 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699977962019, current=DOWN, previous=UP]
2023-11-15 00:06:02.019 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:06:02.061 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:06:02.185 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:06:02.190 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:06:03.805 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:06:03.807 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:06:06.819 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:06:06.865 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:06:06.873 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2023-11-15 00:07:30.569 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:07:31.451 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:07:32.901 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:07:32.904 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:07:33.019 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 61ms. Found 0 Redis repository interfaces.
2023-11-15 00:07:33.174 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:07:33.459 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:07:34.939 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:07:34.954 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:07:34.955 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:07:34.956 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:07:35.058 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:07:35.058 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3600 ms
2023-11-15 00:07:35.339 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:07:35.360 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:07:36.006 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:07:38.407 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:07:39.244 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:07:43.097 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:07:43.269 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:07:43.678 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:07:44.132 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:07:44.171 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37279 (http) with context path ''
2023-11-15 00:07:44.172 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37279
2023-11-15 00:07:44.179 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:07:44.252 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:07:44.314 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:07:44.314 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:07:44.505 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:07:44.505 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:07:44.708 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:07:44.871 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:07:44.871 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:07:44.871 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:07:44.871 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:07:44.871 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:07:44.871 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:07:44.871 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:07:45.087 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:07:45.088 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:07:45.091 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:07:45.095 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699978065093 with initial instances count: 0
2023-11-15 00:07:45.101 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:07:45.102 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978065102, current=UP, previous=STARTING]
2023-11-15 00:07:45.105 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:07:45.215 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:07:45.399 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 15.424 seconds (JVM running for 16.975)
2023-11-15 00:07:45.432 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:07:45.433 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:07:47.964 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:07:48.005 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:07:31 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@79ac50fe]; rollback [true]
2023-11-15 00:07:48.432 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:07:48.503 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:08:20.009 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:08:20.010 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:08:20.010 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:08:20.010 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:08:20.010 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:08:20.010 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: false
2023-11-15 00:08:20.011 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:08:20.097 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.131 [DiscoveryClient-CacheRefreshExecutor-0] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:08:20.167 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.202 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.273 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.314 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.357 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.392 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.430 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.465 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.536 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.573 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.607 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.645 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.722 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.759 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.793 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.834 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
[FAILED toString()]
2023-11-15 00:08:20.930 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:07:31 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:08:20.935 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:08:20.936 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978100935, current=DOWN, previous=UP]
2023-11-15 00:08:20.936 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:08:20.983 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:08:21.130 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:08:21.137 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:08:22.552 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:08:22.554 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:08:25.557 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:08:25.608 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:08:25.617 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2023-11-15 00:09:01.308 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:09:02.442 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:09:03.994 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:09:03.997 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:09:04.054 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44ms. Found 0 Redis repository interfaces.
2023-11-15 00:09:04.266 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:09:04.559 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:09:06.015 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:09:06.030 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:09:06.031 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:09:06.031 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:09:06.117 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:09:06.118 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3668 ms
2023-11-15 00:09:06.386 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:09:06.416 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:09:07.037 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:09:09.448 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:09:10.287 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:09:14.328 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:09:14.565 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:09:14.997 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:09:15.430 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:09:15.473 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37314 (http) with context path ''
2023-11-15 00:09:15.475 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37314
2023-11-15 00:09:15.482 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:09:15.570 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:09:15.626 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:09:15.627 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:09:15.769 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:09:15.769 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:09:15.964 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:09:16.114 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:09:16.115 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:09:16.115 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:09:16.115 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:09:16.115 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:09:16.115 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:09:16.115 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:09:16.326 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:09:16.328 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:09:16.333 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:09:16.338 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699978156336 with initial instances count: 0
2023-11-15 00:09:16.349 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:09:16.350 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978156350, current=UP, previous=STARTING]
2023-11-15 00:09:16.354 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:09:16.491 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:09:16.664 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 16.094 seconds (JVM running for 17.627)
2023-11-15 00:09:16.707 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:09:16.707 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:09:19.273 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:09:19.310 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:09:02 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@77b6d94c, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@5b51a4c7, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@1a61721e, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@6eb06667), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@2f0dae44]; rollback [true]
2023-11-15 00:09:19.790 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:09:19.867 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:09:19.946 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjquery.controller.bean.auto;

import com.example.cyjcommon.converter.bean.SqlConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.SqlVo;
import com.example.cyjquery.service.bean.auto.SqlServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("sqlApi")
@Tag(name = "Sql")
public interface SqlController {

    private SqlServiceImpl service;

    private SqlConverter converter;

    @Autowired
    public void setService(SqlServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(SqlConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody SqlVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody SqlVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.045 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.DictionaryConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.DictionaryVo;
import com.example.cyjdictionary.service.bean.auto.DictionaryServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Dictionary")
public interface DictionaryController {

    private DictionaryServiceImpl service;

    private DictionaryConverter converter;

    @Autowired
    public void setService(DictionaryServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(DictionaryConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody DictionaryVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody DictionaryVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.093 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.CatalogConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.CatalogVo;
import com.example.cyjdictionary.service.bean.auto.CatalogServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Catalog")
public interface CatalogController {

    private CatalogServiceImpl service;

    private CatalogConverter converter;

    @Autowired
    public void setService(CatalogServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(CatalogConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody CatalogVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody CatalogVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.181 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableConfig")
public interface PersistentTableConfigController {

    private PersistentTableConfigServiceImpl service;

    private PersistentTableConfigConverter converter;

    @Autowired
    public void setService(PersistentTableConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConfigConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.281 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentFormConfig")
public interface PersistentFormConfigController {

    private PersistentFormConfigServiceImpl service;

    private PersistentFormConfigConverter converter;

    @Autowired
    public void setService(PersistentFormConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConfigConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.346 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AppServiceConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AppServiceVo;
import com.example.cyjentitycreater.service.bean.auto.AppServiceServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "AppService")
public interface AppServiceController {

    private AppServiceServiceImpl service;

    private AppServiceConverter converter;

    @Autowired
    public void setService(AppServiceServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AppServiceConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody AppServiceVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody AppServiceVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.379 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTable")
public interface PersistentTableController {

    private PersistentTableServiceImpl service;

    private PersistentTableConverter converter;

    @Autowired
    public void setService(PersistentTableServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody PersistentTableVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody PersistentTableVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.415 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PropertyConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PropertyVo;
import com.example.cyjentitycreater.service.bean.auto.PropertyServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Property")
public interface PropertyController {

    private PropertyServiceImpl service;

    private PropertyConverter converter;

    @Autowired
    public void setService(PropertyServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PropertyConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody PropertyVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody PropertyVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.459 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Persistent")
public interface PersistentController {

    private PersistentServiceImpl service;

    private PersistentConverter converter;

    @Autowired
    public void setService(PersistentServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody PersistentVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody PersistentVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.531 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.EnterpriseConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.EnterpriseVo;
import com.example.cyjuser.service.bean.auto.EnterpriseServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Enterprise")
public interface EnterpriseController {

    private EnterpriseServiceImpl service;

    private EnterpriseConverter converter;

    @Autowired
    public void setService(EnterpriseServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(EnterpriseConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody EnterpriseVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody EnterpriseVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.564 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableSearchConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableSearchConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableSearchConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableSearchConfig")
public interface PersistentTableSearchConfigController {

    private PersistentTableSearchConfigServiceImpl service;

    private PersistentTableSearchConfigConverter converter;

    @Autowired
    public void setService(PersistentTableSearchConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableSearchConfigConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.598 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AuthorityConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AuthorityVo;
import com.example.cyjuser.service.bean.auto.AuthorityServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Authority")
public interface AuthorityController {

    private AuthorityServiceImpl service;

    private AuthorityConverter converter;

    @Autowired
    public void setService(AuthorityServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AuthorityConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody AuthorityVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody AuthorityVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.641 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentForm")
public interface PersistentFormController {

    private PersistentFormServiceImpl service;

    private PersistentFormConverter converter;

    @Autowired
    public void setService(PersistentFormServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody PersistentFormVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody PersistentFormVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.710 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjworkflow.controller.bean.auto;

import com.example.cyjcommon.converter.bean.WorkFlowConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.WorkFlowVo;
import com.example.cyjworkflow.service.bean.auto.WorkFlowServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("workFlowApi")
@Tag(name = "WorkFlow")
public interface WorkFlowController {

    private WorkFlowServiceImpl service;

    private WorkFlowConverter converter;

    @Autowired
    public void setService(WorkFlowServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(WorkFlowConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody WorkFlowVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody WorkFlowVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.743 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.RoleConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.RoleVo;
import com.example.cyjuser.service.bean.auto.RoleServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Role")
public interface RoleController {

    private RoleServiceImpl service;

    private RoleConverter converter;

    @Autowired
    public void setService(RoleServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(RoleConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody RoleVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody RoleVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.777 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.UserConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.UserVo;
import com.example.cyjuser.service.bean.auto.UserServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "User")
public interface UserController {

    private UserServiceImpl service;

    private UserConverter converter;

    @Autowired
    public void setService(UserServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(UserConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody UserVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody UserVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.809 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.MenuConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.MenuVo;
import com.example.cyjentitycreater.service.bean.auto.MenuServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Menu")
public interface MenuController {

    private MenuServiceImpl service;

    private MenuConverter converter;

    @Autowired
    public void setService(MenuServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(MenuConverter converter) {
        this.converter = converter;
    }

    public ResultVO page(@RequestBody MenuVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    public ResultVO save(@NotNull @RequestBody MenuVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:09:20.881 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:09:02 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@77b6d94c, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@5b51a4c7, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@1a61721e, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@6eb06667), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:09:20.889 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:09:20.889 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978160889, current=DOWN, previous=UP]
2023-11-15 00:09:20.889 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:09:20.924 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:09:21.085 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:09:21.090 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:09:21.768 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:09:21.770 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:09:24.777 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:09:24.825 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:09:24.838 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2023-11-15 00:10:49.413 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:10:50.278 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:10:51.643 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:10:51.647 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:10:51.791 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57ms. Found 0 Redis repository interfaces.
2023-11-15 00:10:51.961 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:10:52.264 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:10:53.765 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:10:53.779 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:10:53.780 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:10:53.780 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:10:53.891 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:10:53.892 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3606 ms
2023-11-15 00:10:54.168 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:10:54.193 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:10:54.796 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:10:57.207 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:10:58.021 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:11:02.087 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:11:02.225 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:11:02.576 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:11:02.979 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:11:03.028 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37346 (http) with context path ''
2023-11-15 00:11:03.030 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37346
2023-11-15 00:11:03.039 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:11:03.138 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:11:03.213 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:11:03.213 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:11:03.369 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:11:03.370 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:11:03.564 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:11:03.719 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:11:03.719 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:11:03.719 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:11:03.719 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:11:03.719 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:11:03.719 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:11:03.720 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:11:03.919 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:11:03.921 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:11:03.924 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:11:03.928 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699978263927 with initial instances count: 0
2023-11-15 00:11:03.937 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:11:03.938 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978263938, current=UP, previous=STARTING]
2023-11-15 00:11:03.941 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:11:04.057 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:11:04.237 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 15.424 seconds (JVM running for 16.88)
2023-11-15 00:11:04.279 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:11:04.280 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:11:06.757 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:11:06.796 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:10:50 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@79ac50fe]; rollback [true]
2023-11-15 00:11:07.188 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:11:07.261 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:11:07.339 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjquery.controller.bean.auto;

import com.example.cyjcommon.converter.bean.SqlConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.SqlVo;
import com.example.cyjquery.service.bean.auto.SqlServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("sqlApi")
@Tag(name = "Sql")
public interface SqlController {

    private SqlServiceImpl service;

    private SqlConverter converter;

    @Autowired
    public void setService(SqlServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(SqlConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Sql")
    @PostMapping(value = "pageSql")
    public ResultVO page(@RequestBody SqlVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Sql")
    @PostMapping(value = "saveSql")
    public ResultVO save(@NotNull @RequestBody SqlVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Sql")
    @GetMapping(value = "deleteSql/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.416 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.DictionaryConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.DictionaryVo;
import com.example.cyjdictionary.service.bean.auto.DictionaryServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Dictionary")
public interface DictionaryController {

    private DictionaryServiceImpl service;

    private DictionaryConverter converter;

    @Autowired
    public void setService(DictionaryServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(DictionaryConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Dictionary")
    @PostMapping(value = "pageDictionary")
    public ResultVO page(@RequestBody DictionaryVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Dictionary")
    @PostMapping(value = "saveDictionary")
    public ResultVO save(@NotNull @RequestBody DictionaryVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Dictionary")
    @GetMapping(value = "deleteDictionary/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.449 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.CatalogConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.CatalogVo;
import com.example.cyjdictionary.service.bean.auto.CatalogServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Catalog")
public interface CatalogController {

    private CatalogServiceImpl service;

    private CatalogConverter converter;

    @Autowired
    public void setService(CatalogServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(CatalogConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Catalog")
    @PostMapping(value = "pageCatalog")
    public ResultVO page(@RequestBody CatalogVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Catalog")
    @PostMapping(value = "saveCatalog")
    public ResultVO save(@NotNull @RequestBody CatalogVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Catalog")
    @GetMapping(value = "deleteCatalog/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.518 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableConfig")
public interface PersistentTableConfigController {

    private PersistentTableConfigServiceImpl service;

    private PersistentTableConfigConverter converter;

    @Autowired
    public void setService(PersistentTableConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableConfig")
    @PostMapping(value = "pagePersistentTableConfig")
    public ResultVO page(@RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableConfig")
    @PostMapping(value = "savePersistentTableConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableConfig")
    @GetMapping(value = "deletePersistentTableConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.559 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentFormConfig")
public interface PersistentFormConfigController {

    private PersistentFormConfigServiceImpl service;

    private PersistentFormConfigConverter converter;

    @Autowired
    public void setService(PersistentFormConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentFormConfig")
    @PostMapping(value = "pagePersistentFormConfig")
    public ResultVO page(@RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentFormConfig")
    @PostMapping(value = "savePersistentFormConfig")
    public ResultVO save(@NotNull @RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentFormConfig")
    @GetMapping(value = "deletePersistentFormConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.595 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AppServiceConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AppServiceVo;
import com.example.cyjentitycreater.service.bean.auto.AppServiceServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "AppService")
public interface AppServiceController {

    private AppServiceServiceImpl service;

    private AppServiceConverter converter;

    @Autowired
    public void setService(AppServiceServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AppServiceConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有AppService")
    @PostMapping(value = "pageAppService")
    public ResultVO page(@RequestBody AppServiceVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存AppService")
    @PostMapping(value = "saveAppService")
    public ResultVO save(@NotNull @RequestBody AppServiceVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除AppService")
    @GetMapping(value = "deleteAppService/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.635 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTable")
public interface PersistentTableController {

    private PersistentTableServiceImpl service;

    private PersistentTableConverter converter;

    @Autowired
    public void setService(PersistentTableServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTable")
    @PostMapping(value = "pagePersistentTable")
    public ResultVO page(@RequestBody PersistentTableVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTable")
    @PostMapping(value = "savePersistentTable")
    public ResultVO save(@NotNull @RequestBody PersistentTableVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTable")
    @GetMapping(value = "deletePersistentTable/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.672 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PropertyConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PropertyVo;
import com.example.cyjentitycreater.service.bean.auto.PropertyServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Property")
public interface PropertyController {

    private PropertyServiceImpl service;

    private PropertyConverter converter;

    @Autowired
    public void setService(PropertyServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PropertyConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Property")
    @PostMapping(value = "pageProperty")
    public ResultVO page(@RequestBody PropertyVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Property")
    @PostMapping(value = "saveProperty")
    public ResultVO save(@NotNull @RequestBody PropertyVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Property")
    @GetMapping(value = "deleteProperty/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.717 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Persistent")
public interface PersistentController {

    private PersistentServiceImpl service;

    private PersistentConverter converter;

    @Autowired
    public void setService(PersistentServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Persistent")
    @PostMapping(value = "pagePersistent")
    public ResultVO page(@RequestBody PersistentVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Persistent")
    @PostMapping(value = "savePersistent")
    public ResultVO save(@NotNull @RequestBody PersistentVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Persistent")
    @GetMapping(value = "deletePersistent/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.786 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.EnterpriseConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.EnterpriseVo;
import com.example.cyjuser.service.bean.auto.EnterpriseServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Enterprise")
public interface EnterpriseController {

    private EnterpriseServiceImpl service;

    private EnterpriseConverter converter;

    @Autowired
    public void setService(EnterpriseServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(EnterpriseConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Enterprise")
    @PostMapping(value = "pageEnterprise")
    public ResultVO page(@RequestBody EnterpriseVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Enterprise")
    @PostMapping(value = "saveEnterprise")
    public ResultVO save(@NotNull @RequestBody EnterpriseVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Enterprise")
    @GetMapping(value = "deleteEnterprise/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.823 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableSearchConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableSearchConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableSearchConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableSearchConfig")
public interface PersistentTableSearchConfigController {

    private PersistentTableSearchConfigServiceImpl service;

    private PersistentTableSearchConfigConverter converter;

    @Autowired
    public void setService(PersistentTableSearchConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableSearchConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableSearchConfig")
    @PostMapping(value = "pagePersistentTableSearchConfig")
    public ResultVO page(@RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableSearchConfig")
    @PostMapping(value = "savePersistentTableSearchConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableSearchConfig")
    @GetMapping(value = "deletePersistentTableSearchConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.858 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AuthorityConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AuthorityVo;
import com.example.cyjuser.service.bean.auto.AuthorityServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Authority")
public interface AuthorityController {

    private AuthorityServiceImpl service;

    private AuthorityConverter converter;

    @Autowired
    public void setService(AuthorityServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AuthorityConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Authority")
    @PostMapping(value = "pageAuthority")
    public ResultVO page(@RequestBody AuthorityVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Authority")
    @PostMapping(value = "saveAuthority")
    public ResultVO save(@NotNull @RequestBody AuthorityVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Authority")
    @GetMapping(value = "deleteAuthority/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.900 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentForm")
public interface PersistentFormController {

    private PersistentFormServiceImpl service;

    private PersistentFormConverter converter;

    @Autowired
    public void setService(PersistentFormServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentForm")
    @PostMapping(value = "pagePersistentForm")
    public ResultVO page(@RequestBody PersistentFormVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentForm")
    @PostMapping(value = "savePersistentForm")
    public ResultVO save(@NotNull @RequestBody PersistentFormVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentForm")
    @GetMapping(value = "deletePersistentForm/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.965 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjworkflow.controller.bean.auto;

import com.example.cyjcommon.converter.bean.WorkFlowConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.WorkFlowVo;
import com.example.cyjworkflow.service.bean.auto.WorkFlowServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("workFlowApi")
@Tag(name = "WorkFlow")
public interface WorkFlowController {

    private WorkFlowServiceImpl service;

    private WorkFlowConverter converter;

    @Autowired
    public void setService(WorkFlowServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(WorkFlowConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有WorkFlow")
    @PostMapping(value = "pageWorkFlow")
    public ResultVO page(@RequestBody WorkFlowVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存WorkFlow")
    @PostMapping(value = "saveWorkFlow")
    public ResultVO save(@NotNull @RequestBody WorkFlowVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除WorkFlow")
    @GetMapping(value = "deleteWorkFlow/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:07.998 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.RoleConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.RoleVo;
import com.example.cyjuser.service.bean.auto.RoleServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Role")
public interface RoleController {

    private RoleServiceImpl service;

    private RoleConverter converter;

    @Autowired
    public void setService(RoleServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(RoleConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Role")
    @PostMapping(value = "pageRole")
    public ResultVO page(@RequestBody RoleVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Role")
    @PostMapping(value = "saveRole")
    public ResultVO save(@NotNull @RequestBody RoleVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Role")
    @GetMapping(value = "deleteRole/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:08.031 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.UserConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.UserVo;
import com.example.cyjuser.service.bean.auto.UserServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "User")
public interface UserController {

    private UserServiceImpl service;

    private UserConverter converter;

    @Autowired
    public void setService(UserServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(UserConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有User")
    @PostMapping(value = "pageUser")
    public ResultVO page(@RequestBody UserVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存User")
    @PostMapping(value = "saveUser")
    public ResultVO save(@NotNull @RequestBody UserVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除User")
    @GetMapping(value = "deleteUser/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:08.066 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.MenuConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.MenuVo;
import com.example.cyjentitycreater.service.bean.auto.MenuServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Menu")
public interface MenuController {

    private MenuServiceImpl service;

    private MenuConverter converter;

    @Autowired
    public void setService(MenuServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(MenuConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Menu")
    @PostMapping(value = "pageMenu")
    public ResultVO page(@RequestBody MenuVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Menu")
    @PostMapping(value = "saveMenu")
    public ResultVO save(@NotNull @RequestBody MenuVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Menu")
    @GetMapping(value = "deleteMenu/{id}")
    public ResultVO delete(@PathVariable String id) {
        return ResultVO.success();
    }

}
2023-11-15 00:11:08.141 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:10:50 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@5b51a4c7, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@1a61721e, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@6eb06667, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@2f0dae44), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:11:08.147 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:11:08.148 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978268148, current=DOWN, previous=UP]
2023-11-15 00:11:08.148 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:11:08.199 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:11:08.339 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:11:08.345 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:11:09.141 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:11:09.145 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:11:12.160 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:11:12.207 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:11:12.219 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2023-11-15 00:12:14.189 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:12:15.024 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:12:16.417 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:12:16.422 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:12:16.537 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 Redis repository interfaces.
2023-11-15 00:12:16.668 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:12:16.944 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:12:18.457 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:12:18.474 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:12:18.475 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:12:18.476 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:12:18.561 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:12:18.562 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3532 ms
2023-11-15 00:12:18.810 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:12:18.829 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:12:19.469 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:12:21.944 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:12:22.741 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:12:26.724 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:12:26.874 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:12:27.269 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:12:27.662 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:12:27.702 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37376 (http) with context path ''
2023-11-15 00:12:27.703 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37376
2023-11-15 00:12:27.710 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:12:27.784 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:12:27.848 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:12:27.848 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:12:27.987 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:12:27.988 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:12:28.172 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:12:28.324 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:12:28.324 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:12:28.324 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:12:28.324 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:12:28.324 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:12:28.324 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:12:28.325 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:12:28.516 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:12:28.518 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:12:28.521 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:12:28.525 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699978348523 with initial instances count: 0
2023-11-15 00:12:28.533 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:12:28.534 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978348534, current=UP, previous=STARTING]
2023-11-15 00:12:28.537 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:12:28.667 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:12:28.813 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 15.247 seconds (JVM running for 16.79)
2023-11-15 00:12:28.864 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:12:28.864 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:12:31.396 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:12:31.440 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:12:15 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@1a61721e, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@6eb06667, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@2f0dae44, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@79ac50fe), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@684c2c57]; rollback [true]
2023-11-15 00:12:31.850 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:12:31.927 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:12:32.019 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjquery.controller.bean.auto;

import com.example.cyjcommon.converter.bean.SqlConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.SqlVo;
import com.example.cyjquery.service.bean.auto.SqlServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("sqlApi")
@Tag(name = "Sql")
public interface SqlController {

    private SqlServiceImpl service;

    private SqlConverter converter;

    @Autowired
    public void setService(SqlServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(SqlConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Sql")
    @PostMapping(value = "pageSql")
    public ResultVO page(@RequestBody SqlVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Sql")
    @PostMapping(value = "saveSql")
    public ResultVO save(@NotNull @RequestBody SqlVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Sql")
    @GetMapping(value = "deleteSql/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.105 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.DictionaryConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.DictionaryVo;
import com.example.cyjdictionary.service.bean.auto.DictionaryServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Dictionary")
public interface DictionaryController {

    private DictionaryServiceImpl service;

    private DictionaryConverter converter;

    @Autowired
    public void setService(DictionaryServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(DictionaryConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Dictionary")
    @PostMapping(value = "pageDictionary")
    public ResultVO page(@RequestBody DictionaryVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Dictionary")
    @PostMapping(value = "saveDictionary")
    public ResultVO save(@NotNull @RequestBody DictionaryVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Dictionary")
    @GetMapping(value = "deleteDictionary/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.141 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.CatalogConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.CatalogVo;
import com.example.cyjdictionary.service.bean.auto.CatalogServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Catalog")
public interface CatalogController {

    private CatalogServiceImpl service;

    private CatalogConverter converter;

    @Autowired
    public void setService(CatalogServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(CatalogConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Catalog")
    @PostMapping(value = "pageCatalog")
    public ResultVO page(@RequestBody CatalogVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Catalog")
    @PostMapping(value = "saveCatalog")
    public ResultVO save(@NotNull @RequestBody CatalogVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Catalog")
    @GetMapping(value = "deleteCatalog/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.220 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableConfig")
public interface PersistentTableConfigController {

    private PersistentTableConfigServiceImpl service;

    private PersistentTableConfigConverter converter;

    @Autowired
    public void setService(PersistentTableConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableConfig")
    @PostMapping(value = "pagePersistentTableConfig")
    public ResultVO page(@RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableConfig")
    @PostMapping(value = "savePersistentTableConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableConfig")
    @GetMapping(value = "deletePersistentTableConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.263 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentFormConfig")
public interface PersistentFormConfigController {

    private PersistentFormConfigServiceImpl service;

    private PersistentFormConfigConverter converter;

    @Autowired
    public void setService(PersistentFormConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentFormConfig")
    @PostMapping(value = "pagePersistentFormConfig")
    public ResultVO page(@RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentFormConfig")
    @PostMapping(value = "savePersistentFormConfig")
    public ResultVO save(@NotNull @RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentFormConfig")
    @GetMapping(value = "deletePersistentFormConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.302 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AppServiceConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AppServiceVo;
import com.example.cyjentitycreater.service.bean.auto.AppServiceServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "AppService")
public interface AppServiceController {

    private AppServiceServiceImpl service;

    private AppServiceConverter converter;

    @Autowired
    public void setService(AppServiceServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AppServiceConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有AppService")
    @PostMapping(value = "pageAppService")
    public ResultVO page(@RequestBody AppServiceVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存AppService")
    @PostMapping(value = "saveAppService")
    public ResultVO save(@NotNull @RequestBody AppServiceVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除AppService")
    @GetMapping(value = "deleteAppService/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.340 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTable")
public interface PersistentTableController {

    private PersistentTableServiceImpl service;

    private PersistentTableConverter converter;

    @Autowired
    public void setService(PersistentTableServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTable")
    @PostMapping(value = "pagePersistentTable")
    public ResultVO page(@RequestBody PersistentTableVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTable")
    @PostMapping(value = "savePersistentTable")
    public ResultVO save(@NotNull @RequestBody PersistentTableVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTable")
    @GetMapping(value = "deletePersistentTable/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.378 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PropertyConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PropertyVo;
import com.example.cyjentitycreater.service.bean.auto.PropertyServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Property")
public interface PropertyController {

    private PropertyServiceImpl service;

    private PropertyConverter converter;

    @Autowired
    public void setService(PropertyServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PropertyConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Property")
    @PostMapping(value = "pageProperty")
    public ResultVO page(@RequestBody PropertyVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Property")
    @PostMapping(value = "saveProperty")
    public ResultVO save(@NotNull @RequestBody PropertyVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Property")
    @GetMapping(value = "deleteProperty/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.416 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Persistent")
public interface PersistentController {

    private PersistentServiceImpl service;

    private PersistentConverter converter;

    @Autowired
    public void setService(PersistentServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Persistent")
    @PostMapping(value = "pagePersistent")
    public ResultVO page(@RequestBody PersistentVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Persistent")
    @PostMapping(value = "savePersistent")
    public ResultVO save(@NotNull @RequestBody PersistentVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Persistent")
    @GetMapping(value = "deletePersistent/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.494 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.EnterpriseConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.EnterpriseVo;
import com.example.cyjuser.service.bean.auto.EnterpriseServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Enterprise")
public interface EnterpriseController {

    private EnterpriseServiceImpl service;

    private EnterpriseConverter converter;

    @Autowired
    public void setService(EnterpriseServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(EnterpriseConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Enterprise")
    @PostMapping(value = "pageEnterprise")
    public ResultVO page(@RequestBody EnterpriseVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Enterprise")
    @PostMapping(value = "saveEnterprise")
    public ResultVO save(@NotNull @RequestBody EnterpriseVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Enterprise")
    @GetMapping(value = "deleteEnterprise/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.534 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableSearchConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableSearchConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableSearchConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableSearchConfig")
public interface PersistentTableSearchConfigController {

    private PersistentTableSearchConfigServiceImpl service;

    private PersistentTableSearchConfigConverter converter;

    @Autowired
    public void setService(PersistentTableSearchConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableSearchConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableSearchConfig")
    @PostMapping(value = "pagePersistentTableSearchConfig")
    public ResultVO page(@RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableSearchConfig")
    @PostMapping(value = "savePersistentTableSearchConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableSearchConfig")
    @GetMapping(value = "deletePersistentTableSearchConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.575 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AuthorityConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AuthorityVo;
import com.example.cyjuser.service.bean.auto.AuthorityServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Authority")
public interface AuthorityController {

    private AuthorityServiceImpl service;

    private AuthorityConverter converter;

    @Autowired
    public void setService(AuthorityServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AuthorityConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Authority")
    @PostMapping(value = "pageAuthority")
    public ResultVO page(@RequestBody AuthorityVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Authority")
    @PostMapping(value = "saveAuthority")
    public ResultVO save(@NotNull @RequestBody AuthorityVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Authority")
    @GetMapping(value = "deleteAuthority/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.618 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentForm")
public interface PersistentFormController {

    private PersistentFormServiceImpl service;

    private PersistentFormConverter converter;

    @Autowired
    public void setService(PersistentFormServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentForm")
    @PostMapping(value = "pagePersistentForm")
    public ResultVO page(@RequestBody PersistentFormVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentForm")
    @PostMapping(value = "savePersistentForm")
    public ResultVO save(@NotNull @RequestBody PersistentFormVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentForm")
    @GetMapping(value = "deletePersistentForm/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.698 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjworkflow.controller.bean.auto;

import com.example.cyjcommon.converter.bean.WorkFlowConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.WorkFlowVo;
import com.example.cyjworkflow.service.bean.auto.WorkFlowServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("workFlowApi")
@Tag(name = "WorkFlow")
public interface WorkFlowController {

    private WorkFlowServiceImpl service;

    private WorkFlowConverter converter;

    @Autowired
    public void setService(WorkFlowServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(WorkFlowConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有WorkFlow")
    @PostMapping(value = "pageWorkFlow")
    public ResultVO page(@RequestBody WorkFlowVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存WorkFlow")
    @PostMapping(value = "saveWorkFlow")
    public ResultVO save(@NotNull @RequestBody WorkFlowVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除WorkFlow")
    @GetMapping(value = "deleteWorkFlow/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.737 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.RoleConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.RoleVo;
import com.example.cyjuser.service.bean.auto.RoleServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Role")
public interface RoleController {

    private RoleServiceImpl service;

    private RoleConverter converter;

    @Autowired
    public void setService(RoleServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(RoleConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Role")
    @PostMapping(value = "pageRole")
    public ResultVO page(@RequestBody RoleVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Role")
    @PostMapping(value = "saveRole")
    public ResultVO save(@NotNull @RequestBody RoleVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Role")
    @GetMapping(value = "deleteRole/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.777 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.UserConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.UserVo;
import com.example.cyjuser.service.bean.auto.UserServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "User")
public interface UserController {

    private UserServiceImpl service;

    private UserConverter converter;

    @Autowired
    public void setService(UserServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(UserConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有User")
    @PostMapping(value = "pageUser")
    public ResultVO page(@RequestBody UserVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存User")
    @PostMapping(value = "saveUser")
    public ResultVO save(@NotNull @RequestBody UserVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除User")
    @GetMapping(value = "deleteUser/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.816 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.MenuConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.MenuVo;
import com.example.cyjentitycreater.service.bean.auto.MenuServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Menu")
public interface MenuController {

    private MenuServiceImpl service;

    private MenuConverter converter;

    @Autowired
    public void setService(MenuServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(MenuConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Menu")
    @PostMapping(value = "pageMenu")
    public ResultVO page(@RequestBody MenuVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Menu")
    @PostMapping(value = "saveMenu")
    public ResultVO save(@NotNull @RequestBody MenuVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Menu")
    @GetMapping(value = "deleteMenu/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:12:32.899 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:12:15 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@1a61721e, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@6eb06667, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@2f0dae44, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@79ac50fe), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:12:32.904 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:12:32.904 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978352904, current=DOWN, previous=UP]
2023-11-15 00:12:32.905 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:12:32.942 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:12:33.087 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:12:33.092 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:12:33.761 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:12:33.765 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:12:36.770 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:12:36.815 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:12:36.825 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2023-11-15 00:14:25.638 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:14:26.530 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:14:27.976 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:14:27.979 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:14:28.084 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43ms. Found 0 Redis repository interfaces.
2023-11-15 00:14:28.243 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:14:28.488 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:14:29.957 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:14:29.972 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:14:29.973 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:14:29.973 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:14:30.075 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:14:30.075 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3540 ms
2023-11-15 00:14:30.338 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:14:30.362 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:14:31.019 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:14:33.328 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:14:34.116 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:14:38.213 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:14:38.363 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:14:38.696 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:14:39.097 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:14:39.134 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37424 (http) with context path ''
2023-11-15 00:14:39.135 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37424
2023-11-15 00:14:39.142 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:14:39.217 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:14:39.274 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:14:39.274 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:14:39.410 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:14:39.411 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:14:39.589 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:14:39.736 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:14:39.737 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:14:39.737 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:14:39.737 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:14:39.737 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:14:39.737 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:14:39.737 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:14:39.918 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:14:39.921 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:14:39.924 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:14:39.928 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699978479926 with initial instances count: 0
2023-11-15 00:14:39.935 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:14:39.936 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978479936, current=UP, previous=STARTING]
2023-11-15 00:14:39.940 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:14:40.095 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:14:40.230 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 15.218 seconds (JVM running for 16.671)
2023-11-15 00:14:40.270 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:14:40.270 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:14:42.804 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:14:42.844 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:14:26 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@77b6d94c, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@5b51a4c7, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@1a61721e, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@6eb06667), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@2f0dae44]; rollback [true]
2023-11-15 00:14:43.243 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:14:43.326 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:14:43.409 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjquery.controller.bean.auto;

import com.example.cyjcommon.converter.bean.SqlConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.SqlVo;
import com.example.cyjquery.service.bean.auto.SqlServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("sqlApi")
@Tag(name = "Sql")
public interface SqlController {

    private SqlServiceImpl service;

    private SqlConverter converter;

    @Autowired
    public void setService(SqlServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(SqlConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Sql")
    @PostMapping(value = "pageSql")
    public ResultVO page(@RequestBody SqlVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Sql")
    @PostMapping(value = "saveSql")
    public ResultVO save(@NotNull @RequestBody SqlVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Sql")
    @GetMapping(value = "deleteSql/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.418 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-query\src\main\java\com\example\cyjquery/controller/bean/auto/SqlController.java
2023-11-15 00:14:43.501 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.DictionaryConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.DictionaryVo;
import com.example.cyjdictionary.service.bean.auto.DictionaryServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Dictionary")
public interface DictionaryController {

    private DictionaryServiceImpl service;

    private DictionaryConverter converter;

    @Autowired
    public void setService(DictionaryServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(DictionaryConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Dictionary")
    @PostMapping(value = "pageDictionary")
    public ResultVO page(@RequestBody DictionaryVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Dictionary")
    @PostMapping(value = "saveDictionary")
    public ResultVO save(@NotNull @RequestBody DictionaryVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Dictionary")
    @GetMapping(value = "deleteDictionary/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.504 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-dictionary\src\main\java\com\example\cyjdictionary/controller/bean/auto/DictionaryController.java
2023-11-15 00:14:43.545 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.CatalogConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.CatalogVo;
import com.example.cyjdictionary.service.bean.auto.CatalogServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Catalog")
public interface CatalogController {

    private CatalogServiceImpl service;

    private CatalogConverter converter;

    @Autowired
    public void setService(CatalogServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(CatalogConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Catalog")
    @PostMapping(value = "pageCatalog")
    public ResultVO page(@RequestBody CatalogVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Catalog")
    @PostMapping(value = "saveCatalog")
    public ResultVO save(@NotNull @RequestBody CatalogVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Catalog")
    @GetMapping(value = "deleteCatalog/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.546 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-dictionary\src\main\java\com\example\cyjdictionary/controller/bean/auto/CatalogController.java
2023-11-15 00:14:43.618 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableConfig")
public interface PersistentTableConfigController {

    private PersistentTableConfigServiceImpl service;

    private PersistentTableConfigConverter converter;

    @Autowired
    public void setService(PersistentTableConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableConfig")
    @PostMapping(value = "pagePersistentTableConfig")
    public ResultVO page(@RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableConfig")
    @PostMapping(value = "savePersistentTableConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableConfig")
    @GetMapping(value = "deletePersistentTableConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.620 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentTableConfigController.java
2023-11-15 00:14:43.662 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentFormConfig")
public interface PersistentFormConfigController {

    private PersistentFormConfigServiceImpl service;

    private PersistentFormConfigConverter converter;

    @Autowired
    public void setService(PersistentFormConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentFormConfig")
    @PostMapping(value = "pagePersistentFormConfig")
    public ResultVO page(@RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentFormConfig")
    @PostMapping(value = "savePersistentFormConfig")
    public ResultVO save(@NotNull @RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentFormConfig")
    @GetMapping(value = "deletePersistentFormConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.663 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentFormConfigController.java
2023-11-15 00:14:43.699 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AppServiceConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AppServiceVo;
import com.example.cyjentitycreater.service.bean.auto.AppServiceServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "AppService")
public interface AppServiceController {

    private AppServiceServiceImpl service;

    private AppServiceConverter converter;

    @Autowired
    public void setService(AppServiceServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AppServiceConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有AppService")
    @PostMapping(value = "pageAppService")
    public ResultVO page(@RequestBody AppServiceVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存AppService")
    @PostMapping(value = "saveAppService")
    public ResultVO save(@NotNull @RequestBody AppServiceVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除AppService")
    @GetMapping(value = "deleteAppService/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.701 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/AppServiceController.java
2023-11-15 00:14:43.737 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTable")
public interface PersistentTableController {

    private PersistentTableServiceImpl service;

    private PersistentTableConverter converter;

    @Autowired
    public void setService(PersistentTableServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTable")
    @PostMapping(value = "pagePersistentTable")
    public ResultVO page(@RequestBody PersistentTableVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTable")
    @PostMapping(value = "savePersistentTable")
    public ResultVO save(@NotNull @RequestBody PersistentTableVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTable")
    @GetMapping(value = "deletePersistentTable/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.738 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentTableController.java
2023-11-15 00:14:43.773 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PropertyConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PropertyVo;
import com.example.cyjentitycreater.service.bean.auto.PropertyServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Property")
public interface PropertyController {

    private PropertyServiceImpl service;

    private PropertyConverter converter;

    @Autowired
    public void setService(PropertyServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PropertyConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Property")
    @PostMapping(value = "pageProperty")
    public ResultVO page(@RequestBody PropertyVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Property")
    @PostMapping(value = "saveProperty")
    public ResultVO save(@NotNull @RequestBody PropertyVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Property")
    @GetMapping(value = "deleteProperty/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.774 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PropertyController.java
2023-11-15 00:14:43.809 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Persistent")
public interface PersistentController {

    private PersistentServiceImpl service;

    private PersistentConverter converter;

    @Autowired
    public void setService(PersistentServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Persistent")
    @PostMapping(value = "pagePersistent")
    public ResultVO page(@RequestBody PersistentVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Persistent")
    @PostMapping(value = "savePersistent")
    public ResultVO save(@NotNull @RequestBody PersistentVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Persistent")
    @GetMapping(value = "deletePersistent/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.884 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.EnterpriseConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.EnterpriseVo;
import com.example.cyjuser.service.bean.auto.EnterpriseServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Enterprise")
public interface EnterpriseController {

    private EnterpriseServiceImpl service;

    private EnterpriseConverter converter;

    @Autowired
    public void setService(EnterpriseServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(EnterpriseConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Enterprise")
    @PostMapping(value = "pageEnterprise")
    public ResultVO page(@RequestBody EnterpriseVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Enterprise")
    @PostMapping(value = "saveEnterprise")
    public ResultVO save(@NotNull @RequestBody EnterpriseVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Enterprise")
    @GetMapping(value = "deleteEnterprise/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.886 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/EnterpriseController.java
2023-11-15 00:14:43.923 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableSearchConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableSearchConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableSearchConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableSearchConfig")
public interface PersistentTableSearchConfigController {

    private PersistentTableSearchConfigServiceImpl service;

    private PersistentTableSearchConfigConverter converter;

    @Autowired
    public void setService(PersistentTableSearchConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableSearchConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableSearchConfig")
    @PostMapping(value = "pagePersistentTableSearchConfig")
    public ResultVO page(@RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableSearchConfig")
    @PostMapping(value = "savePersistentTableSearchConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableSearchConfig")
    @GetMapping(value = "deletePersistentTableSearchConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.924 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentTableSearchConfigController.java
2023-11-15 00:14:43.961 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AuthorityConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AuthorityVo;
import com.example.cyjuser.service.bean.auto.AuthorityServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Authority")
public interface AuthorityController {

    private AuthorityServiceImpl service;

    private AuthorityConverter converter;

    @Autowired
    public void setService(AuthorityServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AuthorityConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Authority")
    @PostMapping(value = "pageAuthority")
    public ResultVO page(@RequestBody AuthorityVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Authority")
    @PostMapping(value = "saveAuthority")
    public ResultVO save(@NotNull @RequestBody AuthorityVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Authority")
    @GetMapping(value = "deleteAuthority/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:43.962 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/AuthorityController.java
2023-11-15 00:14:44.003 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentForm")
public interface PersistentFormController {

    private PersistentFormServiceImpl service;

    private PersistentFormConverter converter;

    @Autowired
    public void setService(PersistentFormServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentForm")
    @PostMapping(value = "pagePersistentForm")
    public ResultVO page(@RequestBody PersistentFormVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentForm")
    @PostMapping(value = "savePersistentForm")
    public ResultVO save(@NotNull @RequestBody PersistentFormVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentForm")
    @GetMapping(value = "deletePersistentForm/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:44.004 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentFormController.java
2023-11-15 00:14:44.077 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjworkflow.controller.bean.auto;

import com.example.cyjcommon.converter.bean.WorkFlowConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.WorkFlowVo;
import com.example.cyjworkflow.service.bean.auto.WorkFlowServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("workFlowApi")
@Tag(name = "WorkFlow")
public interface WorkFlowController {

    private WorkFlowServiceImpl service;

    private WorkFlowConverter converter;

    @Autowired
    public void setService(WorkFlowServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(WorkFlowConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有WorkFlow")
    @PostMapping(value = "pageWorkFlow")
    public ResultVO page(@RequestBody WorkFlowVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存WorkFlow")
    @PostMapping(value = "saveWorkFlow")
    public ResultVO save(@NotNull @RequestBody WorkFlowVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除WorkFlow")
    @GetMapping(value = "deleteWorkFlow/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:44.100 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-workflow\src\main\java\com\example\cyjworkflow/controller/bean/auto/WorkFlowController.java
2023-11-15 00:14:44.143 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.RoleConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.RoleVo;
import com.example.cyjuser.service.bean.auto.RoleServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Role")
public interface RoleController {

    private RoleServiceImpl service;

    private RoleConverter converter;

    @Autowired
    public void setService(RoleServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(RoleConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Role")
    @PostMapping(value = "pageRole")
    public ResultVO page(@RequestBody RoleVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Role")
    @PostMapping(value = "saveRole")
    public ResultVO save(@NotNull @RequestBody RoleVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Role")
    @GetMapping(value = "deleteRole/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:44.145 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/RoleController.java
2023-11-15 00:14:44.180 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.UserConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.UserVo;
import com.example.cyjuser.service.bean.auto.UserServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "User")
public interface UserController {

    private UserServiceImpl service;

    private UserConverter converter;

    @Autowired
    public void setService(UserServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(UserConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有User")
    @PostMapping(value = "pageUser")
    public ResultVO page(@RequestBody UserVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存User")
    @PostMapping(value = "saveUser")
    public ResultVO save(@NotNull @RequestBody UserVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除User")
    @GetMapping(value = "deleteUser/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:44.182 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/UserController.java
2023-11-15 00:14:44.217 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.MenuConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.MenuVo;
import com.example.cyjentitycreater.service.bean.auto.MenuServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Menu")
public interface MenuController {

    private MenuServiceImpl service;

    private MenuConverter converter;

    @Autowired
    public void setService(MenuServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(MenuConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Menu")
    @PostMapping(value = "pageMenu")
    public ResultVO page(@RequestBody MenuVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Menu")
    @PostMapping(value = "saveMenu")
    public ResultVO save(@NotNull @RequestBody MenuVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Menu")
    @GetMapping(value = "deleteMenu/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:14:44.218 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/MenuController.java
2023-11-15 00:14:44.310 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:14:26 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@77b6d94c, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@5b51a4c7, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@1a61721e, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@6eb06667), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:14:44.319 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:14:44.319 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978484319, current=DOWN, previous=UP]
2023-11-15 00:14:44.319 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:14:44.363 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:14:44.519 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:14:44.524 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:14:45.189 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:14:45.192 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:14:48.198 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:14:48.249 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:14:48.264 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2023-11-15 00:15:54.607 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.7.Final
2023-11-15 00:15:55.498 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - No active profile set, falling back to default profiles: default
2023-11-15 00:15:56.835 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-11-15 00:15:56.839 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2023-11-15 00:15:56.950 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47ms. Found 0 Redis repository interfaces.
2023-11-15 00:15:57.113 [main] WARN  o.springframework.boot.actuate.endpoint.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
2023-11-15 00:15:57.409 [main] INFO  o.springframework.cloud.context.scope.GenericScope - BeanFactory id=484a4db9-5abc-3ab8-ba58-1e871f5b04d3
2023-11-15 00:15:58.883 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 0 (http)
2023-11-15 00:15:58.900 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:15:58.901 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2023-11-15 00:15:58.901 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.41]
2023-11-15 00:15:58.992 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-11-15 00:15:58.992 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3489 ms
2023-11-15 00:15:59.233 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:15:59.257 [main] INFO  com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@56a05324
2023-11-15 00:15:59.885 [main] INFO  c.g.y.a.MybatisPlusJoinAutoConfiguration - MPJSqlInjector init
2023-11-15 00:16:02.339 [main] INFO  com.netflix.config.sources.URLConfigurationSource - URLs to be used as dynamic configuration source: [file:/C:/Users/noice/IdeaProjects/noice-admin/cyj-entity-creater/target/classes/config.properties]
2023-11-15 00:16:03.228 [main] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
2023-11-15 00:16:08.381 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses Jersey
2023-11-15 00:16:08.556 [main] WARN  o.s.c.l.c.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
2023-11-15 00:16:09.002 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-11-15 00:16:09.471 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-auto-1"]
2023-11-15 00:16:09.515 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 37493 (http) with context path ''
2023-11-15 00:16:09.516 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 37493
2023-11-15 00:16:09.525 [main] INFO  o.s.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2023-11-15 00:16:09.619 [main] INFO  com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2023-11-15 00:16:09.696 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
2023-11-15 00:16:09.696 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
2023-11-15 00:16:09.858 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
2023-11-15 00:16:09.859 [main] INFO  c.n.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
2023-11-15 00:16:10.123 [main] INFO  c.n.d.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2023-11-15 00:16:10.325 [main] INFO  com.netflix.discovery.DiscoveryClient - Disable delta property : false
2023-11-15 00:16:10.325 [main] INFO  com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2023-11-15 00:16:10.326 [main] INFO  com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2023-11-15 00:16:10.326 [main] INFO  com.netflix.discovery.DiscoveryClient - Application is null : false
2023-11-15 00:16:10.326 [main] INFO  com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2023-11-15 00:16:10.326 [main] INFO  com.netflix.discovery.DiscoveryClient - Application version is -1: true
2023-11-15 00:16:10.326 [main] INFO  com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2023-11-15 00:16:10.520 [main] INFO  com.netflix.discovery.DiscoveryClient - The response status is 200
2023-11-15 00:16:10.522 [main] INFO  com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2023-11-15 00:16:10.525 [main] INFO  com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-11-15 00:16:10.528 [main] INFO  com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1699978570527 with initial instances count: 0
2023-11-15 00:16:10.536 [main] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Registering application CYJ-ENTITY-CREATER with eureka with status UP
2023-11-15 00:16:10.538 [main] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978570538, current=UP, previous=STARTING]
2023-11-15 00:16:10.543 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:16:10.691 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:16:10.874 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - Started CyjEntityCreaterApplicationTest in 16.94 seconds (JVM running for 18.459)
2023-11-15 00:16:10.914 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout is close to or more than maxLifetime, disabling it.
2023-11-15 00:16:10.914 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2023-11-15 00:16:13.434 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2023-11-15 00:16:13.474 [main] INFO  o.s.test.context.transaction.TransactionContext - Began transaction (1) for test context [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:15:55 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@77b6d94c, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@5b51a4c7, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@1a61721e, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@6eb06667), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]; transaction manager [org.springframework.jdbc.datasource.DataSourceTransactionManager@2f0dae44]; rollback [true]
2023-11-15 00:16:13.869 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllBefore:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:16:13.940 [main] INFO  c.e.c.s.bean.custom.PersistentCustomServiceImpl - PersistentService.findAllAfter:execution(Page com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl.findAll(PersistentDto))
2023-11-15 00:16:14.025 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjquery.controller.bean.auto;

import com.example.cyjcommon.converter.bean.SqlConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.SqlVo;
import com.example.cyjquery.service.bean.auto.SqlServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("sqlApi")
@Tag(name = "Sql")
public class SqlController {

    private SqlServiceImpl service;

    private SqlConverter converter;

    @Autowired
    public void setService(SqlServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(SqlConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Sql")
    @PostMapping(value = "pageSql")
    public ResultVO page(@RequestBody SqlVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Sql")
    @PostMapping(value = "saveSql")
    public ResultVO save(@NotNull @RequestBody SqlVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Sql")
    @GetMapping(value = "deleteSql/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.034 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-query\src\main\java\com\example\cyjquery/controller/bean/auto/SqlController.java
2023-11-15 00:16:14.107 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.DictionaryConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.DictionaryVo;
import com.example.cyjdictionary.service.bean.auto.DictionaryServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Dictionary")
public class DictionaryController {

    private DictionaryServiceImpl service;

    private DictionaryConverter converter;

    @Autowired
    public void setService(DictionaryServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(DictionaryConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Dictionary")
    @PostMapping(value = "pageDictionary")
    public ResultVO page(@RequestBody DictionaryVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Dictionary")
    @PostMapping(value = "saveDictionary")
    public ResultVO save(@NotNull @RequestBody DictionaryVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Dictionary")
    @GetMapping(value = "deleteDictionary/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.109 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-dictionary\src\main\java\com\example\cyjdictionary/controller/bean/auto/DictionaryController.java
2023-11-15 00:16:14.151 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjdictionary.controller.bean.auto;

import com.example.cyjcommon.converter.bean.CatalogConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.CatalogVo;
import com.example.cyjdictionary.service.bean.auto.CatalogServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("dictionaryApi")
@Tag(name = "Catalog")
public class CatalogController {

    private CatalogServiceImpl service;

    private CatalogConverter converter;

    @Autowired
    public void setService(CatalogServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(CatalogConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Catalog")
    @PostMapping(value = "pageCatalog")
    public ResultVO page(@RequestBody CatalogVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Catalog")
    @PostMapping(value = "saveCatalog")
    public ResultVO save(@NotNull @RequestBody CatalogVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Catalog")
    @GetMapping(value = "deleteCatalog/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.152 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-dictionary\src\main\java\com\example\cyjdictionary/controller/bean/auto/CatalogController.java
2023-11-15 00:16:14.228 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableConfig")
public class PersistentTableConfigController {

    private PersistentTableConfigServiceImpl service;

    private PersistentTableConfigConverter converter;

    @Autowired
    public void setService(PersistentTableConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableConfig")
    @PostMapping(value = "pagePersistentTableConfig")
    public ResultVO page(@RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableConfig")
    @PostMapping(value = "savePersistentTableConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableConfig")
    @GetMapping(value = "deletePersistentTableConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.229 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentTableConfigController.java
2023-11-15 00:16:14.270 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentFormConfig")
public class PersistentFormConfigController {

    private PersistentFormConfigServiceImpl service;

    private PersistentFormConfigConverter converter;

    @Autowired
    public void setService(PersistentFormConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentFormConfig")
    @PostMapping(value = "pagePersistentFormConfig")
    public ResultVO page(@RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentFormConfig")
    @PostMapping(value = "savePersistentFormConfig")
    public ResultVO save(@NotNull @RequestBody PersistentFormConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentFormConfig")
    @GetMapping(value = "deletePersistentFormConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.271 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentFormConfigController.java
2023-11-15 00:16:14.307 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AppServiceConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AppServiceVo;
import com.example.cyjentitycreater.service.bean.auto.AppServiceServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "AppService")
public class AppServiceController {

    private AppServiceServiceImpl service;

    private AppServiceConverter converter;

    @Autowired
    public void setService(AppServiceServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AppServiceConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有AppService")
    @PostMapping(value = "pageAppService")
    public ResultVO page(@RequestBody AppServiceVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存AppService")
    @PostMapping(value = "saveAppService")
    public ResultVO save(@NotNull @RequestBody AppServiceVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除AppService")
    @GetMapping(value = "deleteAppService/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.308 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/AppServiceController.java
2023-11-15 00:16:14.346 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTable")
public class PersistentTableController {

    private PersistentTableServiceImpl service;

    private PersistentTableConverter converter;

    @Autowired
    public void setService(PersistentTableServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTable")
    @PostMapping(value = "pagePersistentTable")
    public ResultVO page(@RequestBody PersistentTableVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTable")
    @PostMapping(value = "savePersistentTable")
    public ResultVO save(@NotNull @RequestBody PersistentTableVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTable")
    @GetMapping(value = "deletePersistentTable/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.348 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentTableController.java
2023-11-15 00:16:14.386 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PropertyConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PropertyVo;
import com.example.cyjentitycreater.service.bean.auto.PropertyServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Property")
public class PropertyController {

    private PropertyServiceImpl service;

    private PropertyConverter converter;

    @Autowired
    public void setService(PropertyServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PropertyConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Property")
    @PostMapping(value = "pageProperty")
    public ResultVO page(@RequestBody PropertyVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Property")
    @PostMapping(value = "saveProperty")
    public ResultVO save(@NotNull @RequestBody PropertyVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Property")
    @GetMapping(value = "deleteProperty/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.387 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PropertyController.java
2023-11-15 00:16:14.429 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Persistent")
public class PersistentController {

    private PersistentServiceImpl service;

    private PersistentConverter converter;

    @Autowired
    public void setService(PersistentServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Persistent")
    @PostMapping(value = "pagePersistent")
    public ResultVO page(@RequestBody PersistentVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Persistent")
    @PostMapping(value = "savePersistent")
    public ResultVO save(@NotNull @RequestBody PersistentVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Persistent")
    @GetMapping(value = "deletePersistent/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.505 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.EnterpriseConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.EnterpriseVo;
import com.example.cyjuser.service.bean.auto.EnterpriseServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Enterprise")
public class EnterpriseController {

    private EnterpriseServiceImpl service;

    private EnterpriseConverter converter;

    @Autowired
    public void setService(EnterpriseServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(EnterpriseConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Enterprise")
    @PostMapping(value = "pageEnterprise")
    public ResultVO page(@RequestBody EnterpriseVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Enterprise")
    @PostMapping(value = "saveEnterprise")
    public ResultVO save(@NotNull @RequestBody EnterpriseVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Enterprise")
    @GetMapping(value = "deleteEnterprise/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.506 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/EnterpriseController.java
2023-11-15 00:16:14.545 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentTableSearchConfigConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentTableSearchConfigVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentTableSearchConfigServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentTableSearchConfig")
public class PersistentTableSearchConfigController {

    private PersistentTableSearchConfigServiceImpl service;

    private PersistentTableSearchConfigConverter converter;

    @Autowired
    public void setService(PersistentTableSearchConfigServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentTableSearchConfigConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentTableSearchConfig")
    @PostMapping(value = "pagePersistentTableSearchConfig")
    public ResultVO page(@RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentTableSearchConfig")
    @PostMapping(value = "savePersistentTableSearchConfig")
    public ResultVO save(@NotNull @RequestBody PersistentTableSearchConfigVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentTableSearchConfig")
    @GetMapping(value = "deletePersistentTableSearchConfig/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.549 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentTableSearchConfigController.java
2023-11-15 00:16:14.585 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.AuthorityConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.AuthorityVo;
import com.example.cyjuser.service.bean.auto.AuthorityServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Authority")
public class AuthorityController {

    private AuthorityServiceImpl service;

    private AuthorityConverter converter;

    @Autowired
    public void setService(AuthorityServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(AuthorityConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Authority")
    @PostMapping(value = "pageAuthority")
    public ResultVO page(@RequestBody AuthorityVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Authority")
    @PostMapping(value = "saveAuthority")
    public ResultVO save(@NotNull @RequestBody AuthorityVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Authority")
    @GetMapping(value = "deleteAuthority/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.585 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/AuthorityController.java
2023-11-15 00:16:14.625 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.PersistentFormConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.PersistentFormVo;
import com.example.cyjentitycreater.service.bean.auto.PersistentFormServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "PersistentForm")
public class PersistentFormController {

    private PersistentFormServiceImpl service;

    private PersistentFormConverter converter;

    @Autowired
    public void setService(PersistentFormServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(PersistentFormConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有PersistentForm")
    @PostMapping(value = "pagePersistentForm")
    public ResultVO page(@RequestBody PersistentFormVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存PersistentForm")
    @PostMapping(value = "savePersistentForm")
    public ResultVO save(@NotNull @RequestBody PersistentFormVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除PersistentForm")
    @GetMapping(value = "deletePersistentForm/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.626 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/PersistentFormController.java
2023-11-15 00:16:14.700 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjworkflow.controller.bean.auto;

import com.example.cyjcommon.converter.bean.WorkFlowConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.WorkFlowVo;
import com.example.cyjworkflow.service.bean.auto.WorkFlowServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("workFlowApi")
@Tag(name = "WorkFlow")
public class WorkFlowController {

    private WorkFlowServiceImpl service;

    private WorkFlowConverter converter;

    @Autowired
    public void setService(WorkFlowServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(WorkFlowConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有WorkFlow")
    @PostMapping(value = "pageWorkFlow")
    public ResultVO page(@RequestBody WorkFlowVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存WorkFlow")
    @PostMapping(value = "saveWorkFlow")
    public ResultVO save(@NotNull @RequestBody WorkFlowVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除WorkFlow")
    @GetMapping(value = "deleteWorkFlow/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.700 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-workflow\src\main\java\com\example\cyjworkflow/controller/bean/auto/WorkFlowController.java
2023-11-15 00:16:14.735 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.RoleConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.RoleVo;
import com.example.cyjuser.service.bean.auto.RoleServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "Role")
public class RoleController {

    private RoleServiceImpl service;

    private RoleConverter converter;

    @Autowired
    public void setService(RoleServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(RoleConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Role")
    @PostMapping(value = "pageRole")
    public ResultVO page(@RequestBody RoleVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Role")
    @PostMapping(value = "saveRole")
    public ResultVO save(@NotNull @RequestBody RoleVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Role")
    @GetMapping(value = "deleteRole/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.736 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/RoleController.java
2023-11-15 00:16:14.773 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjuser.controller.bean.auto;

import com.example.cyjcommon.converter.bean.UserConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.UserVo;
import com.example.cyjuser.service.bean.auto.UserServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("userApi")
@Tag(name = "User")
public class UserController {

    private UserServiceImpl service;

    private UserConverter converter;

    @Autowired
    public void setService(UserServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(UserConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有User")
    @PostMapping(value = "pageUser")
    public ResultVO page(@RequestBody UserVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存User")
    @PostMapping(value = "saveUser")
    public ResultVO save(@NotNull @RequestBody UserVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除User")
    @GetMapping(value = "deleteUser/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.775 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-user\src\main\java\com\example\cyjuser/controller/bean/auto/UserController.java
2023-11-15 00:16:14.817 [main] INFO  c.e.c.CyjEntityCreaterApplicationTest - beanBuilderTest.controllerBeanBuilder:
package com.example.cyjentitycreater.controller.bean.auto;

import com.example.cyjcommon.converter.bean.MenuConverter;
import com.example.cyjcommon.utils.ResultVO;
import com.example.cyjcommon.vo.bean.MenuVo;
import com.example.cyjentitycreater.service.bean.auto.MenuServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author Noice
 */
@CrossOrigin
@RestController
@RequestMapping("entityCreateApi")
@Tag(name = "Menu")
public class MenuController {

    private MenuServiceImpl service;

    private MenuConverter converter;

    @Autowired
    public void setService(MenuServiceImpl service) {
        this.service = service;
    }

    @Autowired
    public void setConverter(MenuConverter converter) {
        this.converter = converter;
    }

    @Operation(summary = "分页查询所有Menu")
    @PostMapping(value = "pageMenu")
    public ResultVO page(@RequestBody MenuVo vo) {
        return ResultVO.success(service.findAll(converter.voToDto(vo)));
    }

    @Operation(summary = "保存Menu")
    @PostMapping(value = "saveMenu")
    public ResultVO save(@NotNull @RequestBody MenuVo vo) {
        return ResultVO.success(vo.getId() == null ? service.addOne(converter.voToDto(vo)) : service.updateOne(converter.voToDto(vo)));
    }

    @Operation(summary = "删除Menu")
    @GetMapping(value = "deleteMenu/{id}")
    public ResultVO delete(@PathVariable String id) {
        service.deleteOne(id);
        return ResultVO.success();
    }

}
2023-11-15 00:16:14.827 [main] INFO  com.example.cyjcommon.utils.BeanUtils - 生成文件,路径为：C:\Users\noice\IdeaProjects\noice-admin\cyj-entity-creater\src\main\java\com\example\cyjentitycreater/controller/bean/auto/MenuController.java
2023-11-15 00:16:14.909 [main] INFO  o.s.test.context.transaction.TransactionContext - Rolled back transaction for test: [DefaultTestContext@34f7cfd9 testClass = CyjEntityCreaterApplicationTest, testInstance = CyjEntityCreaterApplicationTest(wac=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@3e2822, started on Wed Nov 15 00:15:55 CST 2023, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3561c410, mockMvc=null, persistentCustomServiceImpl=com.example.cyjentitycreater.service.bean.custom.PersistentCustomServiceImpl@77b6d94c, persistentService=com.example.cyjentitycreater.service.bean.auto.PersistentServiceImpl@5b51a4c7, persistentRepository=com.example.cyjentitycreater.repository.bean.PersistentRepository@1a61721e, menuCustomService=com.example.cyjentitycreater.service.bean.custom.MenuCustomServiceImpl@6eb06667), testMethod = beanBuilderTest@CyjEntityCreaterApplicationTest, testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@65f095f8 testClass = CyjEntityCreaterApplicationTest, locations = '{}', classes = '{class com.example.cyjentitycreater.CyjEntityCreaterApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=0}', contextCustomizers = set[org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@646be2c3, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@19dc67c2, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@35fc6dc4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@7f9fcf7f, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@31f924f5], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> false]]
2023-11-15 00:16:14.914 [SpringContextShutdownHook] INFO  o.s.c.n.e.serviceregistry.EurekaServiceRegistry - Unregistering application CYJ-ENTITY-CREATER with eureka with status DOWN
2023-11-15 00:16:14.914 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1699978574914, current=DOWN, previous=UP]
2023-11-15 00:16:14.915 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0: registering service...
2023-11-15 00:16:14.950 [DiscoveryClient-InstanceInfoReplicator-0] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - registration status: 204
2023-11-15 00:16:15.100 [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
2023-11-15 00:16:15.106 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2023-11-15 00:16:15.791 [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2023-11-15 00:16:15.794 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2023-11-15 00:16:18.796 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Unregistering ...
2023-11-15 00:16:18.845 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - DiscoveryClient_CYJ-ENTITY-CREATER/NOICE:cyj-entity-creater:0 - deregister  status: 200
2023-11-15 00:16:18.857 [SpringContextShutdownHook] INFO  com.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
